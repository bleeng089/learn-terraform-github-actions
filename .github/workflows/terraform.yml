name: "Terraform"

on:
  push:
    branches:
      - main #Runs the workflow when changes are pushed to the main branch.
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest #This is ran on GitHub-hosted runners VMS
    permissions:
      pull-requests: write
    steps:
      - name: Checkout 
        uses: actions/checkout@v3 #This action checks out your repository to the GitHub runner(GitHub-hosted virtual machine), meaning it fetches your code so the runner has access to it during the workflow execution.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color #The -no-color option prevents Terraform from using colored output. This is useful in CI/CD pipelines, as it makes the logs cleaner and easier to read without the ANSI color codes that might clutter the output.

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' #github.event_name = The name of the event that triggered the workflow run.
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request #This step helps in providing real-time feedback on the pull request with detailed results from the Terraform execution. It enhances the review process by making the relevant information easily accessible to reviewers.
        uses: actions/github-script@v6 #Script Execution: You provide a JavaScript script that runs within the workflow. This script can use the GitHub API to perform various actions, such as creating comments, updating issues, or querying repository data
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1 #If the Terraform plan fails, this step will fail the workflow, ensuring that further steps are not executed.

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false #If the changes are pushed to the main branch, this step will apply the Terraform plan automatically.